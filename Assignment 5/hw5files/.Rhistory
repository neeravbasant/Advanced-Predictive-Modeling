acc = acc + tab[i,i]
}
return(acc/sum(tab))
}
accuracy(mlp.pred, test.Y)
length(table(mlp.pred, test.Y))
nrow(table(mlp.pred, test.Y))
ncol(table(mlp.pred, test.Y))
accuracy <- function(pred, test){
tab = table(pred, test)
acc = 0
for (i in 1:ncol(tab)){
acc = acc + tab[i,i]
}
return(acc/sum(tab))
}
accuracy(mlp.pred, test.Y)
model <- function(nodes, epochs){
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic)
mlp.pred <- round(monmlp.predict(x = test.X, weights = mlp.fit))
return(mlp.pred)
}
setwd("C:/Users/Neerav Basant/Desktop/Fall Semester/Advanced Predictive Modeling/Assignments/Assignment 5/HW5_files")
install.packages("monmlp")
library("monmlp")
train <- read.csv("pendigits.tra")
test <- read.csv("pendigits.tes")
train.X = as.matrix(train[,-(length(train))])
train.Y = as.matrix(train[,(length(train))])
test.X = as.matrix(test[,-(length(test))])
test.Y = as.matrix(test[,(length(test))])
model <- function(nodes, epochs){
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic)
mlp.pred <- round(monmlp.predict(x = test.X, weights = mlp.fit))
return(mlp.pred)
}
accuracy <- function(pred, test){
tab = table(pred, test)
acc = 0
for (i in 1:ncol(tab)){
acc = acc + tab[i,i]
}
return(acc/sum(tab))
}
install.packages("monmlp")
pred_5_500 = model(5, 500)
confusionmatrix_5_500 = (pred_5_500, test.Y)
accuracy(pred_5_500, test.Y)
pred_5_500 = model(5, 500)
confusionmatrix_5_500 = table(pred_5_500, test.Y)
accuracy(pred_5_500, test.Y)
table(pred_5_500, test.Y)
pred_5_500 = model(5, 500)
table(pred_5_500, test.Y)
accuracy(pred_5_500, test.Y)
model <- function(nodes, epochs){
set.seed(123)
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic)
mlp.pred <- round(monmlp.predict(x = test.X, weights = mlp.fit))
return(mlp.pred)
}
pred_5_500 = model(5, 500)
table(pred_5_500, test.Y)
model <- function(nodes, epochs){
set.seed(123)
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic)
mlp.pred <- monmlp.predict(x = test.X, weights = mlp.fit)
return(mlp.pred)
}
pred_5_500 = model(5, 500)
as.factor(pred_5_500)
model <- function(nodes, epochs){
set.seed(123)
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic, To = logistic)
mlp.pred <- monmlp.predict(x = test.X, weights = mlp.fit)
return(mlp.pred)
}
pred_5_500 = model(5, 500)
pred_5_500
model <- function(nodes, epochs){
set.seed(123)
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic)
mlp.pred <- round(monmlp.predict(x = test.X, weights = mlp.fit))
mlp.pred[mlp.pred < 0] = 0
return(mlp.pred)
}
pred_5_500 = model(5, 500)
table(pred_5_500, test.Y)
model <- function(nodes, epochs){
set.seed(123)
mlp.fit <- monmlp.fit(x = train.X, y = train.Y, hidden1 = nodes, iter.max = epochs, Th = logistic)
mlp.pred <- round(monmlp.predict(x = test.X, weights = mlp.fit))
mlp.pred[mlp.pred < 0] = 0
mlp.pred[mlp.pred > 9] = 9
return(mlp.pred)
}
pred_5_500 = model(5, 500)
table(pred_5_500, test.Y)
accuracy(pred_5_500, test.Y)
pred_5_1000 = model(5, 1000)
table(pred_5_1000, test.Y)
accuracy(pred_5_1000, test.Y)
pred_5_2000 = model(5, 2000)
table(pred_5_2000, test.Y)
accuracy(pred_5_2000, test.Y)
pred_5_500 = model(10, 500)
table(pred_5_500, test.Y)
accuracy(pred_5_500, test.Y)
pred_5_1000 = model(10, 1000)
table(pred_5_1000, test.Y)
accuracy(pred_5_1000, test.Y)
pred_5_2000 = model(10, 2000)
table(pred_5_2000, test.Y)
accuracy(pred_5_2000, test.Y)
pred_10_100 = model(10, 100)
table(pred_10_100, test.Y)
accuracy(pred_10_100, test.Y)
pred_10_1000 = model(10, 1000)
table(pred_10_1000, test.Y)
accuracy(pred_10_1000, test.Y)
pred_10_2000 = model(10, 2000)
table(pred_10_2000, test.Y)
accuracy(pred_10_2000, test.Y)
pred_15_100 = model(15, 100)
table(pred_15_100, test.Y)
accuracy(pred_15_100, test.Y)
pred_15_1000 = model(15, 1000)
table(pred_15_1000, test.Y)
accuracy(pred_15_1000, test.Y)
pred_15_2000 = model(15, 2000)
table(pred_15_2000, test.Y)
accuracy(pred_15_2000, test.Y)
load("C:/Users/Neerav Basant/Desktop/Fall Semester/Advanced Predictive Modeling/Assignments/Assignment 5/HW5_files/imbalanced.RData")
load("C:/Users/Neerav Basant/Desktop/Fall Semester/Advanced Predictive Modeling/Assignments/Assignment 5/HW5_files/imbalanced.RData")
load("imbalanced.RData")
load("imbalanced.RData")
View(trdat)
str(trdat)
set.seed(10)
library(caret)
.liPaths()
.libPaths()
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("caret")
library(caret)
install.packages("minqa")
library(caret)
install.packages("nloptr")
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("lme4")
library(caret)
.libPaths()
? glm
log.fit = glm(income ~ ., data = trdat, family = binomial)
View(tedat)
View(trdat)
trdat = trdat[,-1]
View(trdat)
load("imbalanced.RData")
set.seed(10)
log.fit = glm(income ~ ., data = trdat, family = binomial)
tedat[,tedat$income]
tedat$income
?predict
log.pred = predict(log.fit, data = tedat)
pred <- prediction(log.pred,tedat$income)
log.fit
log.pred = predict(log.fit, data = tedat)
str(trdat)
log.fit = glm(income ~ age, data = trdat, family = binomial)
log.fit
log.pred = predict(log.fit, data = tedat)
pred <- prediction(log.pred,tedat$income)
length(log.pred)
length(log.fit)
log.pred = predict(log.fit, data = trdat)
log.pred = predict(log.fit, data = tedat)
log.fit = glm(income ~ age, data = trdat, family = binomial())
log.fit
log.pred = predict(log.fit, data = tedat)
pred <- prediction(log.pred,tedat$income)
?glm
log.pred = predict(log.fit, data = tedat, type = "response")
logi.fit = glm(income ~ age, family = binomial(), data = trdat)
log.pred = predict(logi.fit, data = tedat, type = "response")
summary(log.pred)
setwd("C:/Users/Neerav Basant/Desktop/Fall Semester/Advanced Predictive Modeling/Assignments/Assignment 5/HW5_files")
load("imbalanced.RData")
set.seed(10)
log.fit = glm(income ~ age, family = binomial(), data = trdat)
log.pred = predict(log.fit, data = tedat, type = "response")
summary(log.pred)
summary(log.fit)
log.pred
log.pred = log.fit(data = tedat, type = "response")
log.pred = predict(log.fit, newdata = tedat, type = "response")
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
dim(trdat$income)
table(trdat$income)
library("caret")
upSample(x = ..., y = ..., yname = "income")
?upSample
x = trdat[,!(trdat$income)]
x = trdat[,-1]
View(x)
x = trdat[,-(length(trdat))]
View(x)
View(trdat)
up_trdat = upSample(x = trdat[,-(length(trdat))], y = trdat$income, yname = "income")
down_trdat = downSample(x = trdat[,-(length(trdat))], y = trdat$income, yname = "income")
table(trdat$income)
table(up_trdat$income)
table(down_trdat$income)
log.fit = glm(income ~ ., family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat, type = "response")
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
up.log.fit = glm(income ~ ., family = binomial(), data = up_trdat)
up.log.pred = predict(up.log.fit, newdata = tedat, type = "response")
pred <- prediction(up.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
down.log.fit = glm(income ~ ., family = binomial(), data = down_trdat)
down.log.pred = predict(down.log.fit, newdata = tedat, type = "response")
pred <- prediction(down.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
log.fit = glm(income ~ ., family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat)
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
log.fit = glm(income ~ age, family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat)
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
up.log.fit = glm(income ~ age, family = binomial(), data = up_trdat)
up.log.pred = predict(up.log.fit, newdata = tedat, type = "response")
pred <- prediction(up.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
down.log.fit = glm(income ~ age, family = binomial(), data = down_trdat)
down.log.pred = predict(down.log.fit, newdata = tedat, type = "response")
pred <- prediction(down.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
down.log.fit = glm(income ~ age, family = binomial(), data = down_trdat)
down.log.pred = predict(down.log.fit, newdata = tedat)
pred <- prediction(down.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
table(log.pred, tedat$income)
log.pred = predict(log.fit, newdata = tedat, type = "response")
table(log.pred, tedat$income)
pred.test=rep(0,106)
pred.test[log.pred > .5]=1
table(pred.test, tedat$income)
up.pred.test=rep(0,106)
up.pred.test[up.log.pred > .5]=1
table(up.pred.test, tedat$income)
up.log.pred = predict(up.log.fit, newdata = tedat, type = "response")
up.pred.test=rep(0,106)
up.pred.test[up.log.pred > .5]=1
table(up.pred.test, tedat$income)
down.log.pred = predict(down.log.fit, newdata = tedat, type = "response")
pred.test=rep(0,4000)
pred.test[log.pred > .5]=1
table(pred.test, tedat$income)
up.pred.test=rep(0,4000)
up.pred.test[up.log.pred > .5]=1
table(up.pred.test, tedat$income)
down.pred.test=rep(0,4000)
down.pred.test[down.log.pred > .5]=1
table(down.pred.test, tedat$income)
down.log.pred = predict(down.log.fit, newdata = tedat, type = "response")
down.pred.test=rep(0,4000)
down.pred.test[down.log.pred > .5]=1
table(down.pred.test, tedat$income)
pred <- prediction(down.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
dim(trdat)
dim(up_trdat)
log.fit = glm(income ~ age, family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat, type = "response")
pred.test=rep(0,4000)
pred.test[log.pred > .75]=1
table(pred.test, tedat$income)
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
log.fit = glm(income ~ age, family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat, type = "response")
pred.test=rep(0,4000)
pred.test[log.pred > .25]=1
table(pred.test, tedat$income)
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
up.log.fit = glm(income ~ age, family = binomial(), data = up_trdat)
up.log.pred = predict(up.log.fit, newdata = tedat, type = "response")
up.pred.test=rep(0,4000)
up.pred.test[up.log.pred > .25]=1
table(up.pred.test, tedat$income)
pred <- prediction(up.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
up.log.fit = glm(income ~ age, family = binomial(), data = up_trdat)
up.log.pred = predict(up.log.fit, newdata = tedat, type = "response")
up.pred.test=rep(0,4000)
up.pred.test[up.log.pred > .5]=1
table(up.pred.test, tedat$income)
pred <- prediction(up.log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
table(pred.test, tedat$income)
table(up.pred.test, tedat$income)
table(down.pred.test, tedat$income)
library(rpart)
library(rpart.plot)
reg.fit <- rpart(income ~ ., data=trdat, method = "anova", control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit)
printcp(reg.fit)
reg.fit <- prune(reg.fit,cp=0.00084613)
reg.fit <- rpart(income ~ ., data=trdat, method = "anova", control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit)
printcp(reg.fit)
reg.prune <- prune(reg.fit,cp=0.00084613)
reg.pred = predict(reg.prune, newdata= tedat)
pred <- prediction(reg.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
reg.fit <- rpart(income ~ age, data=trdat, method = "anova", control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit)
printcp(reg.fit)
reg.prune <- prune(reg.fit,cp=0.00084613)
reg.pred = predict(reg.prune, newdata= tedat)
pred <- prediction(reg.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
reg.fit <- rpart(income ~ ., data=trdat, method = "anova", control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit)
printcp(reg.fit)
reg.prune <- prune(reg.fit,cp=0.00084613)
reg.pred = predict(reg.prune, newdata= tedat)
pred <- prediction(reg.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
?rpart
reg.fit <- rpart(income ~ ., data=trdat, method = "class", control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit)
printcp(reg.fit)
reg.prune <- prune(reg.fit,cp=0.00081037)
reg.pred = predict(reg.prune, newdata= tedat)
pred <- prediction(reg.pred,tedat$income)
reg.pred
head(reg.pred)
pred <- prediction(reg.pred$large,tedat$income)
pred <- prediction(reg.pred[,2],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
pred <- prediction(reg.pred[, 1],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
pred <- prediction(reg.pred[, 2],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
reg.fit.loss <- rpart(income ~ ., data=trdat, method = "class", parms=list(split="information", loss=matrix(c(0,1,2,0), byrow=TRUE, nrow=2)), control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit.loss)
printcp(reg.fit.loss)
reg.prune.loss <- prune(reg.fit.loss,cp=0.00035454)
reg.pred.loss = predict(reg.prune.loss, newdata= tedat)
pred <- prediction(reg.pred.loss[, 2],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
reg.fit.loss <- rpart(income ~ ., data=trdat, method = "class", parms=list(split="information", loss=matrix(c(0,2,1,0), byrow=TRUE, nrow=2)), control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit.loss)
printcp(reg.fit.loss)
reg.prune.loss <- prune(reg.fit.loss,cp=0.00048622)
reg.pred.loss = predict(reg.prune.loss, newdata= tedat)
pred <- prediction(reg.pred.loss[, 2],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
reg.pred.test=rep(0,4000)
reg.pred.test[reg.pred[,2] > .5]=1
table(reg.pred.test, tedat$income)
reg.pred.loss.test=rep(0,4000)
reg.pred..loss.test[reg.pred.loss[,2] > .5]=1
table(reg.pred.loss.test, tedat$income)
reg.pred.loss.test=rep(0,4000)
reg.pred.loss.test[reg.pred.loss[,2] > .5]=1
table(reg.pred.loss.test, tedat$income)
reg.fit.loss <- rpart(income ~ ., data=trdat, method = "class", parms=list(split="information", loss=matrix(c(0,1,2,0), byrow=TRUE, nrow=2)), control = rpart.control(xval=5,cp=0.0001))
plotcp(reg.fit.loss)
printcp(reg.fit.loss)
reg.prune.loss <- prune(reg.fit.loss,cp=0.00035454)
reg.pred.loss = predict(reg.prune.loss, newdata= tedat)
reg.pred.loss.test=rep(0,4000)
reg.pred.loss.test[reg.pred.loss[,2] > .5]=1
table(reg.pred.loss.test, tedat$income)
pred <- prediction(reg.pred.loss[, 2],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
install.packages("kernlab")
library(kernlab)
svm.fit <- ksvm(income ~ ., data = trdat, prob.model = T)
?
c
"ksvm"
?ksvm
svm.fit <- ksvm(income ~ ., data = trdat, kernel = "vanilladot")
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
pred <- prediction(svm.pred,tedat$income)
svm.fit <- ksvm(income ~ ., data = trdat, kernel = "vanilladot", class.weights=c("small"=1,"large"=2), prob.model = TRUE)
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
svm.fit <- ksvm(income ~ ., data = trdat, kernel = "vanilladot", class.weights=c("small"=1,"large"=2))
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
pred <- prediction(svm.pred[,2],tedat$income)
pred <- prediction(svm.pred[,1],tedat$income)
pred <- prediction(svm.pred,tedat$income)
svm.pred[svm.pred == 1] = 0
svm.pred
pred <- prediction(svm.pred,tedat$income)
svm.pred[svm.pred == "small"] = 0
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
svm.pred[svm.pred == "small"] = 0
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
str(tedat$income)
svm.prob <-  attr(svm.pred, "probabilities")[,1]
?svm
?ksvm
svm.fit <- ksvm(income ~ ., data = trdat, kernel = "vanilladot", class.weights=c("small"=1,"large"=2), prob.model = TRUE)
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
svm.prob <-  attr(svm.pred, "probabilities")[,1]
attr(svm.pred)
attr(svm.pred, "probabilities")
svm.pred <- predict(svm.fit, newdata = tedat, type = "r", probability = TRUE)
svm.pred <- predict(svm.fit, newdata = tedat, type = "p", probability = TRUE)
svm.pred <- predict(svm.fit, newdata = tedat, type = "p")
svm.prob <-  attr(svm.pred, "probabilities")[,1]
pred <- prediction(svm.pred,tedat$income)
svm.pred <- predict(svm.fit, newdata = tedat, type = "p")
svm.prob <-  attr(svm.pred, "probabilities")[,2]
pred <- prediction(svm.prob,tedat$income)
pred <- prediction(svm.pred[,2],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
pred <- prediction(svm.pred[,1],tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
svm.fit <- ksvm(income ~ ., data = trdat, kernel = "vanilladot", class.weights=c("small"=1,"large"=2), prob.model = TRUE)
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
as.numeric(levels(svm.pred))[svm.pred]
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
as.numeric(levels(svm.pred))[svm.pred]
svm.pred <- predict(svm.fit, newdata = tedat, type = "r")
(levels(svm.pred))
(levels(svm.pred))[svm.pred]
(levels(svm.pred))
label)svm.pred
label(svm.pred)
labels(svm.pred)
?ksvm
svm.pred
summary(svm.pred)
attr(svm.pred)
log.fit = glm(income ~ ., family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat, type = "prob")
log.fit = glm(income ~ ., family = binomial(), data = trdat)
log.pred = predict(log.fit, newdata = tedat, type = "link")
pred.test=rep(0,4000)
pred.test[log.pred > .5]=1
table(pred.test, tedat$income)
pred <- prediction(log.pred,tedat$income)
auc.tmp <- performance(pred,"auc")
auc <- as.numeric(auc.tmp@y.values)
auc
